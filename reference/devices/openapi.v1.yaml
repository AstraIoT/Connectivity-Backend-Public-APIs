openapi: 3.0.0
tags:
  - name: reports
    description: "Operations related with a particular Astra device's reports."
  - name: devices
    description: Operations related with particular Astra devices.
  - name: commands
    description: Operations related with the command-response model of an Astra device.
info:
  title: Devices API
  version: '1.0'
  description: The Devices API can be used to poll the status of devices and act on them.
  contact:
    name: Miguel Vera
    email: miguel@astraiot.co.uk
    url: 'https://www.linkedin.com/in/mikiloz'
servers:
  - url: 'https://connectivity.astraiot.co.uk:443/api/devices/v1'
    description: Production
  - url: 'https://sandbox.connectivity.astraiot.co.uk:443/api/devices/v1'
    description: Sandbox
paths:
  '/devices/{deviceId}':
    parameters:
      - $ref: '#/components/parameters/deviceId'
    get:
      summary: "Obtain the device's last known state"
      tags:
        - devices
      responses:
        '200':
          description: OK
          headers:
            X-Response-Format:
              $ref: '#/components/parameters/X-Response-Format'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: ../common/models/protocolxdevicereport.v1.yaml
                  - $ref: ../common/models/protocolkdevicereport.v1.yaml
                  - $ref: ../common/models/protocolmdevicereport.v1.yaml
        '204':
          description: The device has not connected nor sent any data to the backend yet.
        '404':
          description: Could not find a device by the provided ID.
          content:
            application/json:
              schema:
                $ref: ../common/models/error/genericerror.v1.yaml
      parameters: []
      description: Returns the last known state of the device. Note that this state might not represent reality at the moment of this query. The state is sent back to the caller using the latest report received.
      operationId: getDevice
  '/devices/{deviceId}/command':
    parameters:
      - $ref: '#/components/parameters/deviceId'
    post:
      summary: Send a command to a device
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./models/commandresponse.v1.yaml
        '404':
          description: Could not find a device by the provided ID.
        '408':
          description: 'Request timeout, probably because the Astra device was unavailable at the time.'
          content:
            application/json:
              schema:
                $ref: ../common/models/error/genericerror.v1.yaml
      description: 'Send a command to a device. This operation is synchronous: the HTTP call will return when commanda are received, processed and a response has been sent back to the server, at which time the server will send the response back to the calling client.'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: An array of commands (each a string). The Astra device will execute them sequentially (starting at index 0) and be back with a response for each of them.
              items:
                $ref: ./models/command.v1.yaml
        description: An array of commands.
      operationId: sendCommand
      tags:
        - commands
        - devices
  /devices:
    get:
      summary: Get all your devices
      tags:
        - devices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/paginateddevicesresponse.v1.yaml
      description: 'Obtain a list of all the devices that you currently posses, as well as their last seen online timestamps.'
      parameters:
        - schema:
            type: string
          in: query
          name: offset
          description: 'The device ID provided in the previous response. If none is given, it will start looking from the beggining of the list.'
        - schema:
            type: integer
            maximum: 50
            minimum: 1
            multipleOf: 1
            default: '20'
          in: query
          name: limit
          description: 'Limit the response size (in device no.). Must be a value between 1 and 50, and default is 20.'
      operationId: getAllDevices
    parameters: []
  '/devices/{deviceId}/reports':
    parameters:
      - $ref: '#/components/parameters/deviceId'
    get:
      summary: Get device reports
      tags:
        - reports
        - devices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/paginateddevicereportsresponse.v1.yaml
          headers:
            X-Response-Format:
              $ref: '#/components/parameters/X-Response-Format'
      operationId: getDeviceReports
      description: This endpoint provides a convenient way of obtaining all device reports that match a given query. Reports will be sent back in a paginated response.
      parameters:
        - schema:
            type: string
          in: query
          name: start
          description: 'Filter by a beginning timestamp. If no `end` timestamp is sent, the response will contain the reports of a range of 31 days after this start date.'
        - schema:
            type: string
          in: query
          name: end
          description: "Filter by a termination timestamp. If no `start` timestamp is sent, the response will contain the \nreports of a range of 31 days before this end date."
        - schema:
            type: string
          in: query
          name: reportReason
          description: Filter reports by the indicated report reason. The response will only contain reports that were triggered because of such reason.
components:
  schemas:
    DeviceId:
      title: DeviceId
      type: string
      description: A UUID that identifies a particular IoT device.
    Imei:
      title: Imei
      type: string
      description: The IMEI of the radio on a device.
    FirmwareVersion:
      title: FirmwareVersion
      type: string
      description: A string consisting on the firmware version of a device.
  securitySchemes:
    Basic:
      type: http
      scheme: basic
      description: |-
        To authenticate each and every one of the requests made to this API using this security scheme, you should provide a "ClientId:ApiKey" string encoded in Base64 and add the string "Basic " to the front, like this:
        ```
        Authorization: Basic ${base64EncodedToken}
        ```
        Take into account that you are sending your API key in plain text in every request, so consider using the OAuth2 security scheme to authenticate your requests instead.
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://connectivity.astraiot.co.uk:443/api/auth/v1/token'
          scopes: {}
      description: |-
        Make a request with `Basic Access Authentication`, like is explained above, to the **Refresh URL** displayed at the bottom to obtain an authorization token.

        Then, in each of the requests that you make to this API, you should provide the obtained token in the  `Authorization` header, like this:
        ```
        Authorization: Bearer ${token}
        ```
        Take into account that the token obtained through the **Token URL** has a TTL, so be sure to ensure its renewal.
  parameters:
    deviceId:
      in: path
      name: deviceId
      schema:
        type: string
        format: uuid
      description: A UUID representing a particular IoT device.
      required: true
    X-Response-Format:
      schema:
        type: string
        enum:
          - astra-protocol-x
          - astra-protocol-k
          - astra-protocol-m
      description: "A string telling you how to interpret the JSON object(s) that you'll be receiving. Depends on the vendor of the device, the protocol version, etc."
      required: true
      name: X-Response-Format
      in: header
security:
  - Basic: []
  - OAuth2: []
