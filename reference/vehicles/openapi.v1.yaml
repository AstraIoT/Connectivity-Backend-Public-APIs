openapi: 3.0.0
tags:
  - name: commands
  - name: vehicles
  - name: status
info:
  title: Vehicles API
  version: '1.0'
  description: |-
    The Vehicles API is a simplified down version of the devices API. This API assumes your devices are all connected to vehicles and supporting the main automotion capabilities of the ASTRA (start/stop, immobiliser, driver ID, etc.). Although there is general documentation available for this API, it actually is a client-customized API, so feel free to make an inquiry for your own use-cases.

    All endpoints refer to vehicle IDs, which have 1 to 1 mappings to device IDs.
  contact:
    name: Software team
    email: software@astraiot.co.uk
    url: 'https://www.astraiot.co.uk'
servers:
  - url: 'https://connectivity.astraiot.co.uk:443/api/vehicles/v1'
    description: Production
  - url: 'https://sandbox.connectivity.astraiot.co.uk:443/api/vehicles/v1'
    description: Sandbox
paths:
  '/{vehicleId}/status':
    parameters:
      - $ref: '#/components/parameters/vehicleId'
    get:
      summary: Retrieve vehicle status
      tags:
        - status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleStatus'
        '404':
          description: Could not find a vehicle by the provided ID.
          content:
            application/json:
              schema:
                $ref: ../common/models/error/genericerror.v1.yaml
      operationId: getVehicleStatus
      description: |-
        Retrieves the latest status of a vehicle. Note that this information might not be real-time, since it's is comprised by the last report sent to the backend by the device of this vehicle.

        > The response of this endpoint is fully customizable to your needs, so feel free to ask for more data if needed and we shall agree on a response format.
  '/{vehicleId}/command':
    parameters:
      - $ref: '#/components/parameters/vehicleId'
    post:
      summary: Send a command to a vehicle
      operationId: sendCommandToVehicle
      responses:
        '200':
          description: 'OK, the command was executed successfully.'
        '400':
          description: Bad Request. Check that you have provided a valid command.
          content:
            application/json:
              schema:
                $ref: ../common/models/error/genericerror.v1.yaml
        '404':
          description: Could not find a vehicle by the provided ID.
          content:
            application/json:
              schema:
                $ref: ../common/models/error/genericerror.v1.yaml
        '408':
          description: 'Request timeout, probably because the device on this vehicle was unavailable at the time.'
          content:
            application/json:
              schema:
                $ref: ../common/models/error/genericerror.v1.yaml
      description: |-
        Send a simple command to a vehicle. You might not want to deal with the complexity that comes with the full-fledged Devices API, and this endpoint acts as a simplified version of it.

        > The commands showcased in this endpoint are the generic ones, we can add more commands to suit your needs.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleCommand'
      tags:
        - commands
components:
  schemas:
    VehicleStatus:
      title: VehicleStatus
      type: object
      description: Status report of a vehicle.
      x-tags:
        - models
      properties:
        vehicleId:
          type: string
        deviceBatterySoc:
          type: integer
          multipleOf: 1
          maximum: 100
          minimum: 0
          description: State of Charge of the battery of the device connected to this vehicle.
        lastSeenOnlineTimestamp:
          type: string
          format: date-time
          description: 'Timestamp of last communication to the backend. All the information on this response is, at the very least, updated on this point in time.'
        gpsCoordinates:
          type: object
          required:
            - latitude
            - longitude
            - altitude
          properties:
            latitude:
              type: number
              format: double
            longitude:
              type: number
              format: double
            altitude:
              type: number
              format: double
        reservationStatus:
          type: string
          description: 'If this vehicle is part of a sharing fleet, whether it is reserved, available, or in the middle of a trip.'
          enum:
            - reserved
            - available
            - operated
        batterySoc:
          type: integer
          minimum: 0
          maximum: 100
          multipleOf: 1
          description: "State of Charge of the vehicle's main operation battery. "
        vehicleOdometer:
          type: number
          format: double
          description: The odometer of this vehicle.
        deviceOdometer:
          type: number
          format: double
          description: The odometer of the device connected to this vehicle.
      required:
        - vehicleId
        - lastSeenOnlineTimestamp
        - gpsCoordinates
        - deviceBatterySoc
    VehicleCommand:
      title: VehicleCommand
      type: object
      description: A command sent to a vehicle.
      x-tags:
        - models
      properties:
        command:
          type: string
          description: The command itself. The generic ones are in the enum.
          enum:
            - power-on
            - power-off
            - open-topcase
            - open-seat
            - locate-lights
            - locate-horn
            - locate
            - start-reservation
            - end-reservation
          pattern: '^[a-z-]+'
        arguments:
          type: string
          description: 'Any extra arguments, if required. We can also put the arguments in extra JSON fields.'
      required:
        - command
  securitySchemes:
    Basic:
      type: http
      scheme: basic
      description: |-
        To authenticate each and every one of the requests made to this API using this security scheme, you should provide a "ClientId:ApiKey" string encoded in Base64 and add the string "Basic " to the front, like this:
        ```
        Authorization: Basic ${base64EncodedToken}
        ```
        Take into account that you are sending your API key in plain text in every request, so consider using the OAuth2 security scheme to authenticate your requests instead.
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://connectivity.astraiot.co.uk:443/api/auth/v1/token'
          scopes: {}
      description: |-
        Make a request with `Basic Access Authentication`, like is explained above, to the **Token URL** displayed at the bottom to obtain an authorization token.

        Then, in each of the requests that you make to this API, you should provide the obtained token in the  `Authorization` header, like this:
        ```
        Authorization: Bearer ${token}
        ```
        Take into account that the token obtained through the **Token URL** has a TTL, so be sure to ensure its renewal.
  parameters:
    vehicleId:
      in: path
      name: vehicleId
      schema:
        type: string
        format: uuid
      description: A UUID representing a particular vehicle.
      required: true
security:
  - Basic: []
  - OAuth2: []
